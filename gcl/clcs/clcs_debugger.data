       
#(#! 
(lisp::in-package "CONDITIONS")
#(lisp::get #0=(lisp::quote conditions::debug-command) #1=(lisp::quote conditions::debug-command-argument-count) lisp::progn lisp::setf conditions::debug-command lisp::quote lisp::function lisp::lambda conditions::debug-command-argument-count "~&Debug ~D> " conditions::*debug-level* #\: lisp::*standard-input* lisp::*package* "KEYWORD" :eval conditions::*debug-print* conditions::*debug-eval* conditions::*debug-abort* "~&There is no way to abort.~%" conditions::*debug-continue* "~&There is no way to continue.~%" "~&~A~%" conditions::*debug-condition* "~&You are in a portable debugger.~
             ~%Type a debugger command or a form to evaluate.~
             ~%Commands are:~%" conditions::*debug-restarts* conditions::*number-of-debug-restarts* "~& :EVAL form     Evaluate a form.~
             ~% :HELP          Show this text.~%" "~& :ABORT         Exit by ABORT.~%" "~& :CONTINUE      Exit by CONTINUE.~%" "~& :ERROR         Reprint error message.~%" "~& ~A~A " conditions::*debug-command-prefix* "~D" "~A" #\Space "(Abort) " "(Continue) " "~A" "~%" "Debug" lisp::simple-condition conditions::debug conditions::*debugger-hook* conditions::*debugger-function* conditions::abort conditions::continue "~&~A~%" conditions::*restart-clusters* :name :function :report-function "Return to debug level ~D." "~&No such restart." "~&Too ~:[few~;many~] arguments to ~A." "~&~S is not a debugger command.~%" #:g2601 lisp::make-string-input-stream conditions::invoke-restart-interactively conditions::show-restarts lisp::make-string-output-stream lisp::get-output-stream-string conditions::coerce-to-condition conditions::compute-restarts conditions::find-restart conditions::read-debug-command conditions::execute-debugger-command conditions::make-restart conditions::invoke-restart (system::%init . #((system::*make-special (lisp::quote conditions::*debug-level*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debug-level*)) (lisp::setq conditions::*debug-level* 0)) (system::*make-special (lisp::quote conditions::*debug-abort*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debug-abort*)) (lisp::setq conditions::*debug-abort* lisp::nil)) (system::*make-special (lisp::quote conditions::*debug-continue*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debug-continue*)) (lisp::setq conditions::*debug-continue* lisp::nil)) (system::*make-special (lisp::quote conditions::*debug-condition*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debug-condition*)) (lisp::setq conditions::*debug-condition* lisp::nil)) (system::*make-special (lisp::quote conditions::*debug-restarts*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debug-restarts*)) (lisp::setq conditions::*debug-restarts* lisp::nil)) (system::*make-special (lisp::quote conditions::*number-of-debug-restarts*)) (lisp::or (lisp::boundp (lisp::quote conditions::*number-of-debug-restarts*)) (lisp::setq conditions::*number-of-debug-restarts* 0)) (system::*make-special (lisp::quote conditions::*debug-eval*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debug-eval*)) (lisp::setq conditions::*debug-eval* (lisp::quote lisp::eval))) (system::*make-special (lisp::quote conditions::*debug-print*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debug-print*)) (lisp::setq conditions::*debug-print* (lisp::function (lisp::lambda (lisp::values) (lisp::format lisp::t "~&~{~S~^,~%~}" lisp::values))))) (system::mm (lisp::quote conditions::debug-command) 0) (system::mm (lisp::quote conditions::debug-command-argument-count) 1) (system::mm (lisp::quote conditions::define-debug-command) 2) (system::mf (lisp::quote conditions::read-debug-command) 3) (system::mf (lisp::quote #2=#:g2325) 4) (system::sputprop (lisp::quote :eval) #0# (lisp::symbol-function (lisp::quote #2#))) (system::sputprop (lisp::quote :eval) #1# 1) (system::mf (lisp::quote #3=#:g2354) 5) (system::sputprop (lisp::quote :abort) #0# (lisp::symbol-function (lisp::quote #3#))) (system::sputprop (lisp::quote :abort) #1# 0) (system::mf (lisp::quote #4=#:g2379) 6) (system::sputprop (lisp::quote :continue) #0# (lisp::symbol-function (lisp::quote #4#))) (system::sputprop (lisp::quote :continue) #1# 0) (system::mf (lisp::quote #5=#:g2404) 7) (system::sputprop (lisp::quote :error) #0# (lisp::symbol-function (lisp::quote #5#))) (system::sputprop (lisp::quote :error) #1# 0) (system::mf (lisp::quote #6=#:g2429) 8) (system::sputprop (lisp::quote :help) #0# (lisp::symbol-function (lisp::quote #6#))) (system::sputprop (lisp::quote :help) #1# 0) (system::*make-special (lisp::quote conditions::*debug-command-prefix*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debug-command-prefix*)) (lisp::setq conditions::*debug-command-prefix* ":")) (system::mf (lisp::quote conditions::show-restarts) 9) (system::*make-special (lisp::quote conditions::*debugger-hook*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debugger-hook*)) (lisp::setq conditions::*debugger-hook* lisp::nil)) (system::*make-special (lisp::quote conditions::*debugger-function*)) (lisp::or (lisp::boundp (lisp::quote conditions::*debugger-function*)) (lisp::setq conditions::*debugger-function* (lisp::quote conditions::standard-debugger))) (system::mf (lisp::quote conditions::invoke-debugger) 10) (system::mf (lisp::quote conditions::standard-debugger) 11) (system::mf (lisp::quote conditions::execute-debugger-command) 12) (system::debug (lisp::quote #2#) (lisp::quote (conditions::form))) (system::debug (lisp::quote conditions::show-restarts) (lisp::quote (conditions::restarts lisp::max conditions::target-column))) (system::debug (lisp::quote conditions::invoke-debugger) (lisp::quote (conditions::datum conditions::arguments))) (system::debug (lisp::quote conditions::standard-debugger) (lisp::quote (lisp::condition conditions::*debug-level* conditions::*debug-restarts* lisp::nil conditions::*debug-abort*))) (system::debug (lisp::quote conditions::execute-debugger-command) (lisp::quote (conditions::cmd conditions::args conditions::level #:g2599))))))
)
