       
#(#! 
(lisp::in-package "CONDITIONS")
#((lisp::otherwise lisp::t) (conditions::ecase conditions::ccase conditions::etypecase conditions::ctypecase) "OTHERWISE is not allowed in ~S expressions." (lisp::otherwise lisp::t) conditions::ecase lisp::let lisp::case lisp::otherwise conditions::error (lisp::quote conditions::case-failure) :name (lisp::quote conditions::ecase) :datum :expected-type lisp::quote lisp::member :possibilities conditions::ccase lisp::block lisp::tagbody lisp::return-from conditions::restart-case (lisp::quote conditions::case-failure) (lisp::quote conditions::ccase) conditions::store-value (conditions::value) :report lisp::lambda (lisp::stream) lisp::format lisp::stream "Supply a new value of ~S." :interactive conditions::read-evaluated-form lisp::setf conditions::value lisp::go conditions::etypecase lisp::typecase (lisp::quote conditions::case-failure) (lisp::quote conditions::etypecase) lisp::or conditions::ctypecase (lisp::quote conditions::case-failure) (lisp::quote conditions::ctypecase) (conditions::value) (lisp::stream) "Supply a new value of ~S." "Retry assertion" " with new value~P for ~{~S~^, ~}." "." "The old value of ~S is ~S.~
		  ~%Do you want to supply a new value? " lisp::*query-io* "~&Type a form to be evaluated:~%" lisp::simple-type-error :format-string "The assertion ~S failed." :format-arguments lisp::unless conditions::simple-assertion-failure conditions::continue (lisp::stream) conditions::assert-report conditions::assert-prompt "~&Type a form to be evaluated:~%" lisp::if lisp::typep "The value of ~S is ~S, ~
				     which is not ~A." "The value of ~S is ~S, ~
				     which is not of type ~S." (conditions::value) (lisp::stream) "Supply a new value of ~S." conditions::accumulate-cases conditions::escape-special-cases-replace lisp::y-or-n-p (system::%init . #((system::mf (lisp::quote conditions::accumulate-cases) 0) (system::mf (lisp::quote conditions::escape-special-cases-replace) 1) (system::mm (lisp::quote conditions::ecase) 2) (system::mm (lisp::quote conditions::ccase) 3) (system::mm (lisp::quote conditions::etypecase) 4) (system::mm (lisp::quote conditions::ctypecase) 5) (system::mf (lisp::quote conditions::assert-report) 6) (system::mf (lisp::quote conditions::assert-prompt) 7) (system::mf (lisp::quote conditions::simple-assertion-failure) 8) (system::mm (lisp::quote conditions::assert) 9) (system::mf (lisp::quote conditions::read-evaluated-form) 10) (system::mm (lisp::quote conditions::check-type) 11) (system::debug (lisp::quote conditions::accumulate-cases) (lisp::quote (conditions::macro-name conditions::cases conditions::list-is-atom-p #:g2212))) (system::debug (lisp::quote conditions::escape-special-cases-replace) (lisp::quote (conditions::cases))) (system::debug (lisp::quote conditions::assert-report) (lisp::quote (conditions::names lisp::stream))) (system::debug (lisp::quote conditions::assert-prompt) (lisp::quote (conditions::name conditions::value))) (system::debug (lisp::quote conditions::simple-assertion-failure) (lisp::quote (conditions::assertion))))))
)
