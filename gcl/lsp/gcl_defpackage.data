       
#(#! 
(lisp::in-package :defpackage)#! 
(lisp::export (lisp::quote (defpackage::defpackage)))#! 
(lisp::use-package :sloop)#! 
(lisp::provide :defpackage)#! 
(lisp::in-package "USER")#! 
(lisp::use-package "DEFPACKAGE")
#((:documentation :size :nicknames :shadow :shadowing-import-from :use :import-from :intern :export :export-from) "Proceed, ignoring this option." "~s is not a valid option." (:size :documentation) :key :invalid-form "DEFPACKAGE option ~s specified more than once." :nicknames :documentation :size :shadow :intern :export :shadowing-import-from :import-from :export-from "The symbol ~s cannot coexist in these lists:~{ ~s~}" 1 2 3 4 "The symbol ~s cannot coexist in these lists:~{ ~s~}" :test 2147483646 lisp::eval-when (lisp::load lisp::eval lisp::compile) lisp::if lisp::find-package lisp::progn lisp::rename-package lisp::quote :use lisp::unuse-package lisp::package-use-list lisp::make-package (lisp::quote :use) (lisp::quote lisp::nil) (lisp::quote :nicknames) lisp::setf lisp::get :keyword (lisp::quote system::package-documentation) lisp::let lisp::*package* lisp::shadow lisp::mapcar (lisp::function lisp::intern) lisp::shadowing-import lisp::function lisp::lambda (lisp::symbol) lisp::find-symbol lisp::symbol lisp::intern lisp::specific-correctable-error :package-error "" (lisp::format lisp::nil "Symbol ~S not present~%" lisp::symbol) lisp::use-package "LISP" lisp::import (lisp::symbol) "" (lisp::format lisp::nil "Symbol ~S not present~%" lisp::symbol) (lisp::function lisp::intern) lisp::export (lisp::function lisp::intern) lisp::dolist lisp::package (lisp::do-external-symbols (lisp::symbol (lisp::find-package lisp::package)) (lisp::when (lisp::nth 1 (lisp::multiple-value-list (lisp::find-symbol (lisp::string lisp::symbol)))) (lisp::export (lisp::list (lisp::intern (lisp::string lisp::symbol)))))) lisp::count lisp::car lisp::specific-error lisp::find lisp::string= lisp::type-error (system::%init . #((lisp::proclaim (lisp::quote (lisp::declaration lisp::values defpackage::arglist))) (system::putprop (lisp::quote defpackage::defpackage) "DEFPACKAGE - DEFINED-PACKAGE-NAME {OPTION}*			[Macro]

   This creates a new package, or modifies an existing one, whose name is
   DEFINED-PACKAGE-NAME.  The DEFINED-PACKAGE-NAME may be a string or a 
   symbol; if it is a symbol, only its print name matters, and not what
   package, if any, the symbol happens to be in.  The newly created or 
   modified package is returned as the value of the DEFPACKAGE form.

   Each standard OPTION is a list of keyword (the name of the option)
   and associated arguments.  No part of a DEFPACKAGE form is evaluated.
   Except for the :SIZE and :DOCUMENTATION options, more than one option 
   of the same kind may occur within the same DEFPACKAGE form.

  Valid Options:
	(:documentation		string)
	(:size			integer)
	(:nicknames		{package-name}*)
	(:shadow		{symbol-name}*)
	(:shadowing-import-from	package-name {symbol-name}*)
	(:use			{package-name}*)
	(:import-from		package-name {symbol-name}*)
	(:intern		{symbol-name}*)
	(:export		{symbol-name}*)
	(:export-from		{package-name}*)

  [Note: :EXPORT-FROM is an extension to DEFPACKAGE.
	 If a symbol is interned in the package being created and
	 if a symbol with the same print name appears as an external
	 symbol of one of the packages in the :EXPORT-FROM option,
	 then the symbol is exported from the package being created.

	 :DOCUMENTATION is an extension to DEFPACKAGE.

	 :SIZE is used only in Genera and Allegro.]" (lisp::quote system::function-documentation)) (system::mm (lisp::quote defpackage::defpackage) 0) (lisp::let* ((#0=#:g1503 :defpackage)) (lisp::setq lisp::*features* (lisp::adjoin #0# lisp::*features*))) (lisp::unintern (lisp::quote defpackage::defpackage) (lisp::quote defpackage::user)))))
)
