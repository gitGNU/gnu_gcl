       
#(#! 
(lisp::in-package :ansi-loop)#! 
(lisp::export (lisp::quote (lisp::loop ansi-loop::loop-finish)))#! 
(lisp::provide :loop)
#(lisp::copy-list ansi-loop::loopvar- ansi-loop::*loop-gentemp* lisp::let* (lisp::list lisp::nil) lisp::list (lisp::list* lisp::cons) (lisp::nil (lisp::quote lisp::nil)) lisp::when lisp::setf lisp::cdr lisp::setq lisp::last lisp::rplacd lisp::progn lisp::cddr lisp::cdddr lisp::cddddr ansi-loop::loop-minimax ansi-loop::*loop-minimax-type-infinities-alist* :test :answer-variable :type :temp-variable ansi-loop::loop-maxmin-temp- :flag-variable ansi-loop::loop-maxmin-flag- :operations :infinity-data lisp::let lisp::declare lisp::type lisp::min lisp::< lisp::> lisp::or lisp::not lisp::gethash lisp::symbol-name ansi-loop::loop-universe "Non-ANSI" "ANSI" "Extended-ANSI" "#<~S ~A>" lisp::*print-level* lisp::*print-length* (lisp::member lisp::nil lisp::t :extended) "" "The value of ~:@(~S~), ~:@(~S~), is not ~A." ansi-loop::ansi lisp::*error-output* "Please input the new value for the place ~:@(~S~): " "Now continuing ...~%" :keywords :for-keywords :iteration-keywords :path-keywords :ansi :implicit-for-required :type-keywords :type-symbols :size lisp::prog1 ansi-loop::*loop-destructuring-hooks* ansi-loop::loop-really-desetq lisp::car ansi-loop::*loop-desetq-temporary* "The form ~S evaluated to ~S, which was not of the anticipated type ~S." "LOOP-BODY called with non-synched before- and after-loop lists." ansi-loop::*loop-duplicate-code* ansi-loop::*loop-iteration-flag-variable* lisp::if (lisp::go lisp::return lisp::return-from) lisp::tagbody ansi-loop::next-loop ((lisp::go ansi-loop::next-loop)) ansi-loop::end-loop ansi-loop::estimate-code-size ansi-loop::*special-code-sizes* lisp::cond ansi-loop::desetq (lisp::setq lisp::psetq) lisp::go lisp::function ansi-loop::duplicatable-code-p lisp::multiple-value-setq lisp::return-from ansi-loop::*estimate-code-size-punt* ansi-loop::*loop-source-context* ansi-loop::*loop-source-code* :invalid-form "~?~%Current LOOP context:~{ ~S~}." "~?~%Current LOOP context:~{ ~S~}." "LOOP couldn't verify that ~S is a subtype of the required type ~S." "Specified data type ~S is not a subtype of ~S." (lisp::go ansi-loop::end-loop) ansi-loop::*loop-macro-environment* ansi-loop::*loop-universe* ansi-loop::*loop-original-source-code* ansi-loop::*loop-iteration-variables* ansi-loop::*loop-variables* ansi-loop::*loop-nodeclare* ansi-loop::*loop-named-variables* ansi-loop::*loop-declarations* ansi-loop::*loop-desetq-crocks* ansi-loop::*loop-bind-stack* ansi-loop::*loop-prologue* ansi-loop::*loop-wrappers* ansi-loop::*loop-before-loop* ansi-loop::*loop-body* ansi-loop::*loop-emitted-body* ansi-loop::*loop-after-body* ansi-loop::*loop-epilogue* ansi-loop::*loop-after-epilogue* ansi-loop::*loop-final-value-culprit* ansi-loop::*loop-inside-conditional* ansi-loop::*loop-when-it-variable* ansi-loop::*loop-never-stepped-variable* ansi-loop::*loop-names* ansi-loop::*loop-collection-no-into* ansi-loop::*loop-collection-cruft* ansi-loop::loop-body lisp::locally lisp::destructuring-bind lisp::block "~S found where LOOP keyword expected." (lisp::and ansi-loop::else) "Secondary clause misplaced at top level in LOOP macro: ~S ~S ~S ..." "~S is an unknown keyword in LOOP macro." "LOOP source code ran out when another token was expected." "LOOP code ran out where a form was expected." "LOOP clause is providing a value for the iteration,~@
	        however one was already established by a ~S clause." "LOOP clause is providing a value for the iteration,~@
	        however one was already established by a ~S clause." "~:[This LOOP~;The LOOP ~:*~S~] clause is not permitted inside a conditional." lisp::number lisp::float (lisp::complex lisp::float) ansi-loop::of-type "~S found where a LOOP keyword, LOOP type keyword, or LOOP type pattern expected." "~S found where a LOOP keyword or LOOP type keyword expected." "Destructuring type pattern ~S contains unrecognized type keyword ~S." "Destructuring type pattern ~S doesn't match variable pattern ~S." ansi-loop::loop-ignore- lisp::ignore "Duplicated LOOP iteration variable ~S." "Duplicated variable ~S in LOOP parallel binding." "Bad variable ~S somewhere in LOOP." ansi-loop::loop-destructure- "Invalid LOOP variable passed in: ~S." ansi-loop::loop-bind- :else :end "~S found where keyword expected getting LOOP clause after ~S." ansi-loop::it "~S does not introduce a LOOP clause that can follow ~S." :and :initially :finally "~S is an invalid name for your LOOP." "The NAMED ~S clause occurs too late." "You may only use one NAMED clause in your loop: NAMED ~S ... NAMED ~S." ansi-loop::loop-collector ansi-loop::into "Value accumulation recipient name, ~S, is not a symbol." :key :name :class :history :dtype "Incompatible kinds of LOOP value accumulation specified for collecting~@
		    ~:[as the value of the LOOP~;~:*INTO ~S~]: ~S and ~S." "Unequal datatypes specified in different LOOP value accumulations~@
		   into ~S: ~S and ~S." ansi-loop::loop-list-head- ansi-loop::loop-list-tail- ansi-loop::with-loop-list-collection-head ansi-loop::loop-collect-answer ansi-loop::loop-copylist* ansi-loop::loop-collect-rplacd ansi-loop::sum ansi-loop::loop-sum- lisp::count lisp::1+ lisp::+ ansi-loop::maxmin ansi-loop::*loop-real-data-type* ansi-loop::loop-maxmin- ansi-loop::with-minimax-value ansi-loop::loop-accumulate-minimax-value lisp::unless (lisp::go ansi-loop::end-loop) :with := "Iteration in LOOP follows body code." (lisp::go ansi-loop::end-loop) (lisp::go ansi-loop::end-loop) "~S is an unknown keyword in FOR or AS clause in LOOP." lisp::the (lisp::nil lisp::nil lisp::nil) ansi-loop::loop-repeat- lisp::plusp lisp::1- (lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil) lisp::minusp (lisp::nil lisp::nil lisp::nil) ansi-loop::loop-it- :then (lisp::nil lisp::nil) (lisp::nil lisp::nil) ansi-loop::loop-across-vector- ansi-loop::loop-across-index- lisp::vector lisp::fixnum ansi-loop::loop-across-limit- lisp::length lisp::>= lisp::aref :by (lisp::function lisp::cdr) lisp::quote "Use of QUOTE around stepping function in LOOP will be left verbatim." lisp::funcall ansi-loop::loop-fn- lisp::atom ansi-loop::loop-list- lisp::endp ansi-loop::loop-path ansi-loop::universe :names :function :user-data :preposition-groups :inclusive-permitted (:each :the) (:its :each :his :her) "~S found where ITS or EACH expected in LOOP iteration path syntax." :in "Unrecognizable LOOP iteration path syntax.  Missing EACH or THE?" "~S found where a LOOP iteration path name was expected." "~S is not the name of a LOOP iteration path." "\"Inclusive\" iteration is not possible with the ~S LOOP iteration path." :inclusive "Unused USING variables: ~S." (6 10) "Value passed back by LOOP iteration path function for path ~S has invalid length." "A ~S prepositional phrase occurs multiply for some LOOP clause." "Preposition ~S used when some other preposition has subsumed it." ansi-loop::using "~S bad variable pair in path USING phrase." "The variable substitution for ~S occurs twice in a USING phrase,~@
		        with ~S and ~S." :downfrom :down :upfrom :up :upto :to :downto :above :below ansi-loop::loop-limit- ansi-loop::loop-step-by- "~S invalid preposition in sequencing or sequence path.~@
	       Invalid prepositions specified in iteration path descriptor or something?" "Conflicting stepping directions in LOOP sequencing path" "Missing OF or IN phrase in sequence path" (lisp::nil :up) ansi-loop::loop-seq-limit- "Don't know where to start stepping." lisp::<= lisp::- ((:from :upfrom :downfrom) (:to :upto :downto :above :below) (:by)) ansi-loop::index lisp::sequence (lisp::member ansi-loop::hash-key ansi-loop::hash-value) ansi-loop::which (:in :of) "Too many prepositions!" "Missing OF or IN in ~S iteration path." ansi-loop::loop-hashtab- ansi-loop::loop-hashtab-next- ansi-loop::hash-key ansi-loop::hash-value lisp::with-hash-table-iterator ansi-loop::loop-hash-key-temp- ansi-loop::loop-hash-val-temp- (:in :of) "Too many prepositions!" "Missing OF or IN in ~S iteration path." "Destructuring is not valid for package symbol iteration." ansi-loop::loop-pkgsym- ansi-loop::loop-pkgsym-next- lisp::with-package-iterator (ansi-loop::named (ansi-loop::loop-do-named)) (ansi-loop::initially (ansi-loop::loop-do-initially)) (ansi-loop::finally (ansi-loop::loop-do-finally)) (lisp::do (ansi-loop::loop-do-do)) (ansi-loop::doing (ansi-loop::loop-do-do)) (lisp::return (ansi-loop::loop-do-return)) (ansi-loop::collect (ansi-loop::loop-list-collection lisp::list)) (ansi-loop::collecting (ansi-loop::loop-list-collection lisp::list)) (lisp::append (ansi-loop::loop-list-collection lisp::append)) (ansi-loop::appending (ansi-loop::loop-list-collection lisp::append)) (lisp::nconc (ansi-loop::loop-list-collection lisp::nconc)) (ansi-loop::nconcing (ansi-loop::loop-list-collection lisp::nconc)) ansi-loop::loop-sum-collection ansi-loop::counting ((ansi-loop::sum (ansi-loop::loop-sum-collection ansi-loop::sum lisp::number lisp::number)) (ansi-loop::summing (ansi-loop::loop-sum-collection ansi-loop::sum lisp::number lisp::number)) (ansi-loop::maximize (ansi-loop::loop-maxmin-collection lisp::max)) (ansi-loop::minimize (ansi-loop::loop-maxmin-collection lisp::min)) (ansi-loop::maximizing (ansi-loop::loop-maxmin-collection lisp::max)) (ansi-loop::minimizing (ansi-loop::loop-maxmin-collection lisp::min)) (ansi-loop::always (ansi-loop::loop-do-always lisp::t lisp::nil)) (ansi-loop::never (ansi-loop::loop-do-always lisp::t lisp::t)) (ansi-loop::thereis (ansi-loop::loop-do-thereis lisp::t)) (ansi-loop::while (ansi-loop::loop-do-while lisp::nil :while)) (ansi-loop::until (ansi-loop::loop-do-while lisp::t :until)) (lisp::when (ansi-loop::loop-do-if lisp::when lisp::nil)) (lisp::if (ansi-loop::loop-do-if lisp::if lisp::nil)) (lisp::unless (ansi-loop::loop-do-if lisp::unless lisp::t)) (ansi-loop::with (ansi-loop::loop-do-with))) ((lisp::= (ansi-loop::loop-ansi-for-equals)) (ansi-loop::across (ansi-loop::loop-for-across)) (ansi-loop::in (ansi-loop::loop-for-in)) (ansi-loop::on (ansi-loop::loop-for-on)) (ansi-loop::from (ansi-loop::loop-for-arithmetic :from)) (ansi-loop::downfrom (ansi-loop::loop-for-arithmetic :downfrom)) (ansi-loop::upfrom (ansi-loop::loop-for-arithmetic :upfrom)) (ansi-loop::below (ansi-loop::loop-for-arithmetic :below)) (ansi-loop::above (ansi-loop::loop-for-arithmetic :above)) (lisp::by (ansi-loop::loop-for-arithmetic :by)) (ansi-loop::to (ansi-loop::loop-for-arithmetic :to)) (ansi-loop::upto (ansi-loop::loop-for-arithmetic :upto)) (ansi-loop::being (ansi-loop::loop-for-being))) ((ansi-loop::for (ansi-loop::loop-do-for)) (ansi-loop::as (ansi-loop::loop-do-for)) (ansi-loop::repeat (ansi-loop::loop-do-repeat))) (lisp::array lisp::atom lisp::bignum lisp::bit lisp::bit-vector lisp::character lisp::compiled-function lisp::complex lisp::cons lisp::double-float lisp::fixnum lisp::float lisp::function lisp::hash-table lisp::integer lisp::keyword lisp::list lisp::long-float lisp::nil lisp::null lisp::number lisp::package lisp::pathname lisp::random-state lisp::ratio lisp::rational lisp::readtable lisp::sequence lisp::short-float lisp::simple-array lisp::simple-bit-vector lisp::simple-string lisp::simple-vector lisp::single-float lisp::standard-char lisp::stream lisp::string lisp::base-char lisp::symbol lisp::t lisp::vector) :extended (ansi-loop::hash-key ansi-loop::hash-keys) ansi-loop::loop-hash-table-iteration-path ((:of :in)) (:which ansi-loop::hash-key) (ansi-loop::hash-value ansi-loop::hash-values) ((:of :in)) (:which ansi-loop::hash-value) (lisp::symbol ansi-loop::symbols) ansi-loop::loop-package-symbols-iteration-path ((:of :in)) (:symbol-types (:internal :external :inherited)) (ansi-loop::external-symbol ansi-loop::external-symbols) ((:of :in)) (:symbol-types (:external)) (ansi-loop::present-symbol ansi-loop::present-symbols) ((:of :in)) (:symbol-types (:internal)) ansi-loop::*loop-ansi-universe* lisp::subtypep ansi-loop::loop-gentemp ansi-loop::make-loop-minimax-internal ansi-loop::loop-typed-init lisp::max ansi-loop::hide-variable-reference lisp::string= lisp::typep lisp::eq ansi-loop::make-loop-universe ansi-loop::loop-make-psetq ansi-loop::loop-make-desetq ansi-loop::loop-warn ansi-loop::loop-optimization-quantities ansi-loop::loop-code-duplication-threshold ansi-loop::destructuring-size ansi-loop::estimate-code-size-1 lisp::special-operator-p ansi-loop::loop-context lisp::specific-error lisp::warn ansi-loop::loop-error ansi-loop::loop-iteration-driver ansi-loop::loop-bind-block ansi-loop::loop-pop-source ansi-loop::loop-lookup-keyword ansi-loop::loop-hack-iteration ansi-loop::loop-tmember ansi-loop::loop-pseudo-body ansi-loop::loop-construct-return lisp::coerce ansi-loop::loop-tequal ansi-loop::loop-declare-variable ansi-loop::loop-make-variable ansi-loop::loop-constantp ansi-loop::loop-get-form ansi-loop::loop-disallow-conditional ansi-loop::loop-get-progn ansi-loop::loop-emit-body :tempvars :data ansi-loop::loop-optional-type lisp::find ansi-loop::loop-collector-name ansi-loop::make-loop-collector ansi-loop::loop-get-collection-info ansi-loop::loop-emit-final-value lisp::nconc lisp::append ansi-loop::loop-check-data-type ansi-loop::make-loop-minimax ansi-loop::loop-note-minimax-operation ansi-loop::loop-when-it-variable ansi-loop::loop-constant-fold-if-possible ansi-loop::loop-make-iteration-variable ansi-loop::loop-list-step system::structure-subtype-p ansi-loop::make-loop-path ansi-loop::loop-collect-prepositional-phrases ansi-loop::loop-tassoc lisp::delete :of :from ansi-loop::loop-sequencer :fetch-function :size-function :sequence-type :element-type ansi-loop::named-variable :which :symbol-types ansi-loop::make-standard-loop-universe ansi-loop::add-loop-path ansi-loop::loop-translate ansi-loop::loop-standard-expansion lisp::equal (system::%init . #((system::mm (lisp::quote ansi-loop::loop-copylist*) 0) (system::*make-special (lisp::quote ansi-loop::*loop-gentemp*)) (lisp::or (lisp::boundp (lisp::quote ansi-loop::*loop-gentemp*)) (lisp::setq ansi-loop::*loop-gentemp* lisp::nil)) (system::mf (lisp::quote ansi-loop::loop-gentemp) 1) (system::*make-special (lisp::quote ansi-loop::*loop-real-data-type*)) (lisp::or (lisp::boundp (lisp::quote ansi-loop::*loop-real-data-type*)) (lisp::setq ansi-loop::*loop-real-data-type* (lisp::quote lisp::real))) (system::mf (lisp::quote ansi-loop::loop-optimization-quantities) 2) (system::mf (lisp::quote ansi-loop::hide-variable-references) 3) (system::mf (lisp::quote ansi-loop::hide-variable-reference) 4) (system::putprop (lisp::quote ansi-loop::with-loop-list-collection-head) (lisp::quote 1) #0=(lisp::quote system::pretty-print-format)) (system::mm (lisp::quote ansi-loop::with-loop-list-collection-head) 5) (system::mm (lisp::quote ansi-loop::loop-collect-rplacd) 6) (system::mm (lisp::quote ansi-loop::loop-collect-answer) 7) (system::define-structure (lisp::quote ansi-loop::loop-minimax) (lisp::quote ansi-loop::loop-minimax-) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote ((ansi-loop::answer-variable lisp::nil lisp::t lisp::nil 0) (lisp::type lisp::nil lisp::t lisp::nil 1) (ansi-loop::temp-variable lisp::nil lisp::t lisp::nil 2) (ansi-loop::flag-variable lisp::nil lisp::t lisp::nil 3) (ansi-loop::operations lisp::nil lisp::t lisp::nil 4) (ansi-loop::infinity-data lisp::nil lisp::t lisp::nil 5))) (lisp::quote ansi-loop::copy-loop-minimax) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote (ansi-loop::make-loop-minimax-internal)) (lisp::quote 6) (lisp::quote ansi-loop::loop-minimax-p) (lisp::quote lisp::nil)) (system::mf (lisp::quote ansi-loop::make-loop-minimax-internal) 8) (system::*make-special (lisp::quote ansi-loop::*loop-minimax-type-infinities-alist*)) (lisp::or (lisp::boundp (lisp::quote ansi-loop::*loop-minimax-type-infinities-alist*)) (lisp::setq ansi-loop::*loop-minimax-type-infinities-alist* (lisp::quote ((lisp::fixnum lisp::most-positive-fixnum lisp::most-negative-fixnum))))) (system::mf (lisp::quote ansi-loop::make-loop-minimax) 9) (system::mf (lisp::quote ansi-loop::loop-note-minimax-operation) 10) (system::putprop (lisp::quote ansi-loop::with-minimax-value) (lisp::quote 1) #0#) (system::mm (lisp::quote ansi-loop::with-minimax-value) 11) (system::mm (lisp::quote ansi-loop::loop-accumulate-minimax-value) 12) (system::mf (lisp::quote ansi-loop::loop-tequal) 13) (system::mf (lisp::quote ansi-loop::loop-tassoc) 14) (system::mf (lisp::quote ansi-loop::loop-tmember) 15) (system::mf (lisp::quote ansi-loop::loop-lookup-keyword) 16) (system::mm (lisp::quote ansi-loop::loop-store-table-data) 17) (system::define-structure (lisp::quote ansi-loop::loop-universe) (lisp::quote ansi-loop::loop-universe-) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote ((ansi-loop::keywords lisp::nil lisp::t lisp::nil 0) (ansi-loop::iteration-keywords lisp::nil lisp::t lisp::nil 1) (ansi-loop::for-keywords lisp::nil lisp::t lisp::nil 2) (ansi-loop::path-keywords lisp::nil lisp::t lisp::nil 3) (ansi-loop::type-symbols lisp::nil lisp::t lisp::nil 4) (ansi-loop::type-keywords lisp::nil lisp::t lisp::nil 5) (ansi-loop::ansi lisp::nil lisp::t lisp::nil 6) (ansi-loop::implicit-for-required lisp::nil lisp::t lisp::nil 7))) (lisp::quote ansi-loop::copy-loop-universe) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote ansi-loop::print-loop-universe) (lisp::quote (ansi-loop::make-loop-universe)) (lisp::quote 8) (lisp::quote ansi-loop::loop-universe-p) (lisp::quote lisp::nil)) (system::mf (lisp::quote ansi-loop::make-loop-universe) 18) (system::mf (lisp::quote ansi-loop::print-loop-universe) 19) (system::*make-special (lisp::quote ansi-loop::*loop-universe*)) (system::mf (lisp::quote ansi-loop::make-standard-loop-universe) 20) (system::*make-special (lisp::quote ansi-loop::*loop-destructuring-hooks*)) (system::putprop (lisp::quote ansi-loop::*loop-destructuring-hooks*) "If not NIL, this must be a list of two things:
a LET-like macro, and a SETQ-like macro, which perform LOOP-style destructuring." (lisp::quote system::variable-documentation)) (lisp::or (lisp::boundp (lisp::quote ansi-loop::*loop-destructuring-hooks*)) (lisp::setq ansi-loop::*loop-destructuring-hooks* lisp::nil)) (system::mf (lisp::quote ansi-loop::loop-make-psetq) 21) (system::mf (lisp::quote ansi-loop::loop-make-desetq) 22) (system::*make-special (lisp::quote ansi-loop::*loop-desetq-temporary*)) (lisp::or (lisp::boundp (lisp::quote ansi-loop::*loop-desetq-temporary*)) (lisp::setq ansi-loop::*loop-desetq-temporary* (lisp::make-symbol "LOOP-DESETQ-TEMP"))) (system::mm (lisp::quote ansi-loop::loop-really-desetq) 23) (system::*make-special (lisp::quote ansi-loop::*loop-source-code*)) (system::*make-special (lisp::quote ansi-loop::*loop-original-source-code*)) (system::*make-special (lisp::quote ansi-loop::*loop-source-context*)) (system::*make-special (lisp::quote ansi-loop::*loop-names*)) (system::*make-special (lisp::quote ansi-loop::*loop-macro-environment*)) (system::*make-special (lisp::quote ansi-loop::*loop-named-variables*)) (system::*make-special (lisp::quote ansi-loop::*loop-variables*)) (system::*make-special (lisp::quote ansi-loop::*loop-declarations*)) (system::*make-special (lisp::quote ansi-loop::*loop-desetq-crocks*)) (system::*make-special (lisp::quote ansi-loop::*loop-wrappers*)) (system::*make-special (lisp::quote ansi-loop::*loop-bind-stack*)) (system::*make-special (lisp::quote ansi-loop::*loop-nodeclare*)) (system::*make-special (lisp::quote ansi-loop::*loop-iteration-variables*)) (system::*make-special (lisp::quote ansi-loop::*loop-prologue*)) (system::*make-special (lisp::quote ansi-loop::*loop-before-loop*)) (system::*make-special (lisp::quote ansi-loop::*loop-body*)) (system::*make-special (lisp::quote ansi-loop::*loop-after-body*)) (system::*make-special (lisp::quote ansi-loop::*loop-emitted-body*)) (system::*make-special (lisp::quote ansi-loop::*loop-epilogue*)) (system::*make-special (lisp::quote ansi-loop::*loop-after-epilogue*)) (system::*make-special (lisp::quote ansi-loop::*loop-final-value-culprit*)) (system::*make-special (lisp::quote ansi-loop::*loop-inside-conditional*)) (system::*make-special (lisp::quote ansi-loop::*loop-when-it-variable*)) (system::*make-special (lisp::quote ansi-loop::*loop-never-stepped-variable*)) (system::*make-special (lisp::quote ansi-loop::*loop-collection-cruft*)) (system::*make-special (lisp::quote ansi-loop::*loop-collection-no-into*)) (system::mf (lisp::quote ansi-loop::loop-constant-fold-if-possible) 24) (system::mf (lisp::quote ansi-loop::loop-constantp) 25) (system::*make-special (lisp::quote ansi-loop::*loop-duplicate-code*)) (lisp::or (lisp::boundp (lisp::quote ansi-loop::*loop-duplicate-code*)) (lisp::setq ansi-loop::*loop-duplicate-code* lisp::nil)) (system::*make-special (lisp::quote ansi-loop::*loop-iteration-flag-variable*)) (lisp::or (lisp::boundp (lisp::quote ansi-loop::*loop-iteration-flag-variable*)) (lisp::setq ansi-loop::*loop-iteration-flag-variable* (lisp::make-symbol "LOOP-NOT-FIRST-TIME"))) (system::mf (lisp::quote ansi-loop::loop-code-duplication-threshold) 26) (system::mm (lisp::quote ansi-loop::loop-body) 27) (system::mf (lisp::quote ansi-loop::duplicatable-code-p) 28) (system::*make-special (lisp::quote ansi-loop::*special-code-sizes*)) (lisp::or (lisp::boundp (lisp::quote ansi-loop::*special-code-sizes*)) (lisp::setq ansi-loop::*special-code-sizes* (lisp::quote ((lisp::return 0) (lisp::progn 0) (lisp::null 1) (lisp::not 1) (lisp::eq 1) (lisp::car 1) (lisp::cdr 1) (lisp::when 1) (lisp::unless 1) (lisp::if 1) (lisp::caar 2) (lisp::cadr 2) (lisp::cdar 2) (lisp::cddr 2) (lisp::caaar 3) (lisp::caadr 3) (lisp::cadar 3) (lisp::caddr 3) (lisp::cdaar 3) (lisp::cdadr 3) (lisp::cddar 3) (lisp::cdddr 3) (lisp::caaaar 4) (lisp::caaadr 4) (lisp::caadar 4) (lisp::caaddr 4) (lisp::cadaar 4) (lisp::cadadr 4) (lisp::caddar 4) (lisp::cadddr 4) (lisp::cdaaar 4) (lisp::cdaadr 4) (lisp::cdadar 4) (lisp::cdaddr 4) (lisp::cddaar 4) (lisp::cddadr 4) (lisp::cdddar 4) (lisp::cddddr 4))))) (system::*make-special (lisp::quote ansi-loop::*estimate-code-size-punt*)) (lisp::or (lisp::boundp (lisp::quote ansi-loop::*estimate-code-size-punt*)) (lisp::setq ansi-loop::*estimate-code-size-punt* (lisp::quote (lisp::block lisp::do lisp::do* lisp::dolist lisp::flet lisp::labels lisp::lambda lisp::let lisp::let* lisp::locally lisp::macrolet lisp::multiple-value-bind lisp::prog lisp::prog* ansi-loop::symbol-macrolet lisp::tagbody lisp::unwind-protect lisp::with-open-file)))) (system::mf (lisp::quote ansi-loop::destructuring-size) 29) (system::mf (lisp::quote ansi-loop::estimate-code-size) 30) (system::mf (lisp::quote ansi-loop::estimate-code-size-1) 31) (system::mf (lisp::quote ansi-loop::loop-context) 32) (system::mf (lisp::quote ansi-loop::loop-error) 33) (system::mf (lisp::quote ansi-loop::loop-warn) 34) (system::mf (lisp::quote ansi-loop::loop-check-data-type) 35) (system::putprop (lisp::quote ansi-loop::loop-finish) "Causes the iteration to terminate \"normally\", the same as implicit
termination by an iteration driving clause, or by use of WHILE or
UNTIL -- the epilogue code (if any) will be run, and any implicitly
collected result will be returned as the value of the LOOP." (lisp::quote system::function-documentation)) (system::mm (lisp::quote ansi-loop::loop-finish) 36) (system::mf (lisp::quote ansi-loop::loop-translate) 37) (system::mf (lisp::quote ansi-loop::loop-iteration-driver) 38) (system::mf (lisp::quote ansi-loop::loop-pop-source) 39) (system::mf (lisp::quote ansi-loop::loop-get-progn) 40) (system::mf (lisp::quote ansi-loop::loop-get-form) 41) (system::mf (lisp::quote ansi-loop::loop-construct-return) 42) (system::mf (lisp::quote ansi-loop::loop-pseudo-body) 43) (system::mf (lisp::quote ansi-loop::loop-emit-body) 44) (system::mf (lisp::quote ansi-loop::loop-emit-final-value) 45) (system::mf (lisp::quote ansi-loop::loop-disallow-conditional) 46) (system::mf (lisp::quote ansi-loop::loop-typed-init) 47) (system::mf (lisp::quote ansi-loop::loop-optional-type) 48) (system::mf (lisp::quote ansi-loop::loop-bind-block) 49) (system::mf (lisp::quote ansi-loop::loop-make-variable) 50) (system::mf (lisp::quote ansi-loop::loop-make-iteration-variable) 51) (system::mf (lisp::quote ansi-loop::loop-declare-variable) 52) (system::mf (lisp::quote ansi-loop::loop-maybe-bind-form) 53) (system::mf (lisp::quote ansi-loop::loop-do-if) 54) (system::mf (lisp::quote ansi-loop::loop-do-initially) 55) (system::mf (lisp::quote ansi-loop::loop-do-finally) 56) (system::mf (lisp::quote ansi-loop::loop-do-do) 57) (system::mf (lisp::quote ansi-loop::loop-do-named) 58) (system::mf (lisp::quote ansi-loop::loop-do-return) 59) (system::define-structure (lisp::quote ansi-loop::loop-collector) (lisp::quote ansi-loop::loop-collector-) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote ((ansi-loop::name lisp::nil lisp::t lisp::nil 0) (lisp::class lisp::nil lisp::t lisp::nil 1) (ansi-loop::history lisp::nil lisp::t lisp::nil 2) (ansi-loop::tempvars lisp::nil lisp::t lisp::nil 3) (ansi-loop::dtype lisp::nil lisp::t lisp::nil 4) (ansi-loop::data lisp::nil lisp::t lisp::nil 5))) (lisp::quote ansi-loop::copy-loop-collector) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote (ansi-loop::make-loop-collector)) (lisp::quote 6) (lisp::quote ansi-loop::loop-collector-p) (lisp::quote lisp::nil)) (system::mf (lisp::quote ansi-loop::make-loop-collector) 60) (system::mf (lisp::quote ansi-loop::loop-get-collection-info) 61) (system::mf (lisp::quote ansi-loop::loop-list-collection) 62) (system::mf (lisp::quote ansi-loop::loop-sum-collection) 63) (system::mf (lisp::quote ansi-loop::loop-maxmin-collection) 64) (system::mf (lisp::quote ansi-loop::loop-do-always) 65) (system::mf (lisp::quote ansi-loop::loop-do-thereis) 66) (system::mf (lisp::quote ansi-loop::loop-do-while) 67) (system::mf (lisp::quote ansi-loop::loop-do-with) 68) (system::mf (lisp::quote ansi-loop::loop-hack-iteration) 69) (system::mf (lisp::quote ansi-loop::loop-do-for) 70) (system::mf (lisp::quote ansi-loop::loop-do-repeat) 71) (system::mf (lisp::quote ansi-loop::loop-when-it-variable) 72) (system::mf (lisp::quote ansi-loop::loop-ansi-for-equals) 73) (system::mf (lisp::quote ansi-loop::loop-for-across) 74) (system::mf (lisp::quote ansi-loop::loop-list-step) 75) (system::mf (lisp::quote ansi-loop::loop-for-on) 76) (system::mf (lisp::quote ansi-loop::loop-for-in) 77) (system::define-structure (lisp::quote ansi-loop::loop-path) (lisp::quote ansi-loop::loop-path-) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote ((ansi-loop::names lisp::nil lisp::t lisp::nil 0) (ansi-loop::preposition-groups lisp::nil lisp::t lisp::nil 1) (ansi-loop::inclusive-permitted lisp::nil lisp::t lisp::nil 2) (lisp::function lisp::nil lisp::t lisp::nil 3) (ansi-loop::user-data lisp::nil lisp::t lisp::nil 4))) (lisp::quote ansi-loop::copy-loop-path) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote (ansi-loop::make-loop-path)) (lisp::quote 5) (lisp::quote ansi-loop::loop-path-p) (lisp::quote lisp::nil)) (system::mf (lisp::quote ansi-loop::make-loop-path) 78) (system::mf (lisp::quote ansi-loop::add-loop-path) 79) (system::mf (lisp::quote ansi-loop::loop-for-being) 80) (system::mf (lisp::quote ansi-loop::named-variable) 81) (system::mf (lisp::quote ansi-loop::loop-collect-prepositional-phrases) 82) (system::mf (lisp::quote ansi-loop::loop-sequencer) 83) (system::mf (lisp::quote ansi-loop::loop-for-arithmetic) 84) (system::mf (lisp::quote ansi-loop::loop-sequence-elements-path) 85) (system::mf (lisp::quote ansi-loop::loop-hash-table-iteration-path) 86) (system::mf (lisp::quote ansi-loop::loop-package-symbols-iteration-path) 87) (system::mf (lisp::quote ansi-loop::make-ansi-loop-universe) 88) (system::*make-special (lisp::quote ansi-loop::*loop-ansi-universe*)) (lisp::setq ansi-loop::*loop-ansi-universe* (ansi-loop::make-ansi-loop-universe lisp::nil)) (system::mf (lisp::quote ansi-loop::loop-standard-expansion) 89) (system::mm (lisp::quote lisp::loop) 90))))
)
