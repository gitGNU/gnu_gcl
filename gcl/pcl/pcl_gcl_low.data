       
#(#! 
(lisp::in-package "SI")#! 
(lisp::export (lisp::quote (system::%structure-name system::%compiled-function-name system::%set-compiled-function-name)))#! 
(lisp::in-package (lisp::quote system::pcl))
#(lisp::member (:test (lisp::function lisp::eq)) lisp::assoc (:test (lisp::function lisp::eq)) lisp::position (:test (lisp::function lisp::eq)) lisp::let lisp::declare lisp::fixnum lisp::block lisp::tagbody lisp::when lisp::>= lisp::return-from lisp::setq lisp::the lisp::1+ lisp::go "~O" lisp::svref lisp::simple-vector lisp::funcall compiler::proclaimed-closure compiler::inline-always compiler::flags lisp::logxor lisp::progn "~S inline" lisp::eval-when (lisp::compile lisp::eval lisp::load) pcl::make-function-inline lisp::quote #\% lisp::defun lisp::type pcl::*gcl-function-inlines* lisp::lambda-block lisp::lambda pcl::*structure-table* system::s-data lisp::*package* pcl::*the-pcl-package* "~s SLOT~D" "sys-package.lisp" "sys-package.lisp" :direction :output :if-exists :append "(lisp::in-package \"SI\")
(export '(%structure-name
          %compiled-function-name
          %set-compiled-function-name))
(in-package \"PCL\")
" "*.fn" "sys-proclaim.lisp" "~%(IN-PACKAGE \"PCL\")~%" lisp::dolist pcl::v "PCL" :inherited (lisp::setf (lisp::get pcl::v (lisp::quote compiler::proclaimed-closure)) lisp::t) "~%" pcl::extract-declarations system::address lisp::fifth lisp::nil lisp::every system::turbo-closure pcl::proclaim-defmethod system::%set-compiled-function-name system::%structure-name pcl::structure-type-internal-slotds pcl::structure-type-included-type-name pcl::get-setf-function-name pcl::do-standard-defsetf-1 compiler::get-packages lisp::open compiler::make-all-proclaims system::package-size system::structure-ref1 (system::%init . #((system::setvv 62 (system::mc lisp::nil 35)) (lisp::setq lisp::*eval-when-compile* lisp::t) (system::mm (lisp::quote pcl::memq) 0) (system::mm (lisp::quote pcl::assq) 1) (system::mm (lisp::quote pcl::posq) 2) (system::mm (lisp::quote lisp::dotimes) 3) (system::mfsfun (lisp::quote pcl::printing-random-thing-internal) 4 2) (lisp::let* ((#0=#:g2203 :turbo-closure)) (lisp::setq lisp::*features* (lisp::adjoin #0# lisp::*features*))) (lisp::let* ((#1=#:g2204 :turbo-closure-env-size)) (lisp::setq lisp::*features* (lisp::adjoin #1# lisp::*features*))) (system::mm (lisp::quote pcl::%svref) 5) (system::putprop (lisp::quote pcl::%svref) (lisp::quote ((lisp::vector pcl::index) (pcl::new-value) (lisp::list (lisp::quote lisp::setf) (lisp::list (lisp::quote lisp::svref) (lisp::list (lisp::quote lisp::the) (lisp::quote lisp::simple-vector) lisp::vector) (lisp::list (lisp::quote lisp::the) (lisp::quote lisp::fixnum) pcl::index)) pcl::new-value))) (lisp::quote system::setf-lambda)) (lisp::remprop (lisp::quote pcl::%svref) (lisp::quote system::setf-update-fn)) (lisp::remprop (lisp::quote pcl::%svref) (lisp::quote system::setf-method)) (system::putprop (lisp::quote pcl::%svref) lisp::nil (lisp::quote system::setf-documentation)) (system::freeze-defstruct (lisp::quote pcl::std-instance)) (system::freeze-defstruct (lisp::quote pcl::method-call)) (system::freeze-defstruct (lisp::quote pcl::fast-method-call)) (system::*make-special (lisp::quote pcl::*pcl-funcall*)) (lisp::or (lisp::boundp (lisp::quote pcl::*pcl-funcall*)) (lisp::setq pcl::*pcl-funcall* (lisp::quote (lisp::lambda (pcl::loc) (compiler::wt-nl "{object _funobj = " pcl::loc ";" "if(type_of(_funobj)==t_cclosure && (_funobj->cc.cc_turbo))
                   (*(_funobj->cc.cc_self))(_funobj->cc.cc_turbo);
               else if (type_of(_funobj)==t_cfun) (*(_funobj->cc.cc_self))();
               else super_funcall_no_event(_funobj);}"))))) (lisp::setq compiler::*super-funcall* pcl::*pcl-funcall*) (system::mm (lisp::quote pcl::fmc-funcall) 6) (system::mfsfun (lisp::quote pcl::proclaim-defmethod) 7 2) (system::mf (lisp::quote pcl::cclosure-env-nthcdr) 8) (system::mf (lisp::quote pcl::%cclosure-env-nthcdr) 9) (system::*make-special (lisp::quote pcl::*gcl-function-inlines*)) (lisp::setq pcl::*gcl-function-inlines* (lisp::quote (#2=(pcl::%fboundp . #3=((lisp::t) lisp::boolean lisp::nil lisp::nil "(#0)->s.s_gfdef!=OBJNULL")) #4=(pcl::%symbol-function . #5=((lisp::t) lisp::t lisp::nil lisp::nil "(#0)->s.s_gfdef")) #6=(system::%structure-name . #7=((lisp::t) lisp::t lisp::nil lisp::nil "(#0)->str.str_def->str.str_self[0]")) #8=(system::%compiled-function-name . #9=((lisp::t) lisp::t lisp::nil lisp::nil "(#0)->cf.cf_name")) #10=(system::%set-compiled-function-name . #11=((lisp::t lisp::t) lisp::t lisp::t lisp::nil "((#0)->cf.cf_name)=(#1)")) #12=(pcl::cclosurep . #13=((lisp::t) lisp::boolean lisp::nil lisp::nil "type_of(#0)==t_cclosure")) #14=(pcl::sfun-p . #15=((lisp::t) lisp::boolean lisp::nil lisp::nil "type_of(#0)==t_sfun")) #16=(pcl::%cclosure-env . #17=((lisp::t) lisp::t lisp::nil lisp::nil "(#0)->cc.cc_env")) #18=(pcl::%set-cclosure-env . #19=((lisp::t lisp::t) lisp::t lisp::t lisp::nil "((#0)->cc.cc_env)=(#1)")) #20=(pcl::%cclosure-env-nthcdr . #21=((lisp::fixnum lisp::t) lisp::t lisp::nil lisp::nil "(#1)->cc.cc_turbo[#0]")) (lisp::logxor . #22=((lisp::fixnum lisp::fixnum) lisp::fixnum lisp::nil lisp::nil "((#0) ^ (#1))"))))) (system::mfsfun (lisp::quote pcl::make-function-inline) 10 1) (system::mm (lisp::quote pcl::define-inlines) 11) (pcl::make-function-inline (lisp::quote (pcl::|%FBOUNDP inline| . #3#))) (system::mfsfun (lisp::quote pcl::%fboundp) 12 1) (pcl::make-function-inline (lisp::quote #2#)) (pcl::make-function-inline (lisp::quote (pcl::|%SYMBOL-FUNCTION inline| . #5#))) (system::mfsfun (lisp::quote pcl::%symbol-function) 13 1) (pcl::make-function-inline (lisp::quote #4#)) (pcl::make-function-inline (lisp::quote (pcl::|SYSTEM:%STRUCTURE-NAME inline| . #7#))) (system::mfsfun (lisp::quote system::%structure-name) 14 1) (pcl::make-function-inline (lisp::quote #6#)) (pcl::make-function-inline (lisp::quote (pcl::|SYSTEM:%COMPILED-FUNCTION-NAME inline| . #9#))) (system::mfsfun (lisp::quote system::%compiled-function-name) 15 1) (pcl::make-function-inline (lisp::quote #8#)) (pcl::make-function-inline (lisp::quote (pcl::|SYSTEM:%SET-COMPILED-FUNCTION-NAME inline| . #11#))) (system::mfsfun (lisp::quote system::%set-compiled-function-name) 16 2) (pcl::make-function-inline (lisp::quote #10#)) (pcl::make-function-inline (lisp::quote (pcl::|CCLOSUREP inline| . #13#))) (system::mfsfun (lisp::quote pcl::cclosurep) 17 1) (pcl::make-function-inline (lisp::quote #12#)) (pcl::make-function-inline (lisp::quote (pcl::|SFUN-P inline| . #15#))) (system::mfsfun (lisp::quote pcl::sfun-p) 18 1) (pcl::make-function-inline (lisp::quote #14#)) (pcl::make-function-inline (lisp::quote (pcl::|%CCLOSURE-ENV inline| . #17#))) (system::mfsfun (lisp::quote pcl::%cclosure-env) 19 1) (pcl::make-function-inline (lisp::quote #16#)) (pcl::make-function-inline (lisp::quote (pcl::|%SET-CCLOSURE-ENV inline| . #19#))) (system::mfsfun (lisp::quote pcl::%set-cclosure-env) 20 2) (pcl::make-function-inline (lisp::quote #18#)) (pcl::make-function-inline (lisp::quote (pcl::|%CCLOSURE-ENV-NTHCDR inline| . #21#))) (system::mfsfun (lisp::quote pcl::%cclosure-env-nthcdr) 21 4098) (pcl::make-function-inline (lisp::quote #20#)) (pcl::make-function-inline (lisp::quote (pcl::|LOGXOR inline| . #22#))) (system::putprop (lisp::quote system::%compiled-function-name) (lisp::quote system::%set-compiled-function-name) #23=(lisp::quote system::setf-update-fn)) (lisp::remprop (lisp::quote system::%compiled-function-name) #24=(lisp::quote system::setf-lambda)) (lisp::remprop (lisp::quote system::%compiled-function-name) #25=(lisp::quote system::setf-method)) (system::putprop (lisp::quote system::%compiled-function-name) lisp::nil #26=(lisp::quote system::setf-documentation)) (system::putprop (lisp::quote pcl::%cclosure-env) (lisp::quote pcl::%set-cclosure-env) #23#) (lisp::remprop (lisp::quote pcl::%cclosure-env) #24#) (lisp::remprop (lisp::quote pcl::%cclosure-env) #25#) (system::putprop (lisp::quote pcl::%cclosure-env) lisp::nil #26#) (system::mfsfun (lisp::quote pcl::set-function-name-1) 22 3) (system::mf (lisp::quote pcl::%set-cclosure) 23) (system::mfsfun (lisp::quote pcl::structure-functions-exist-p) 24 0) (system::putprop (lisp::quote pcl::structure-instance-p) (lisp::caddr (system::defmacro* (lisp::quote pcl::structure-instance-p) (lisp::quote (pcl::x)) (lisp::quote ((pcl::once-only (pcl::x) (lisp::list (lisp::quote lisp::and) (lisp::list (lisp::quote system::structurep) pcl::x) (lisp::list (lisp::quote lisp::not) (lisp::list (lisp::quote lisp::eq) (lisp::list (lisp::quote system::%structure-name) pcl::x) (lisp::quote (lisp::quote pcl::std-instance)))))))))) #27=(lisp::quote compiler::compiler-macro)) (system::mfsfun (lisp::quote pcl::structure-type) 25 1) (system::putprop (lisp::quote pcl::structure-type) (lisp::caddr (system::defmacro* (lisp::quote pcl::structure-type) (lisp::quote (pcl::x)) (lisp::quote ((pcl::once-only (pcl::x) (lisp::list (lisp::quote lisp::and) (lisp::list (lisp::quote system::structurep) pcl::x) (lisp::list (lisp::quote system::%structure-name) pcl::x))))))) #27#) (system::mfsfun (lisp::quote pcl::structure-type-p) 26 1) (system::mfsfun (lisp::quote pcl::structure-type-included-type-name) 27 1) (system::mfsfun (lisp::quote pcl::structure-type-internal-slotds) 28 1) (system::mfsfun (lisp::quote pcl::structure-type-slot-description-list) 29 1) (system::mfsfun (lisp::quote pcl::structure-slotd-name) 30 1) (system::mfsfun (lisp::quote pcl::structure-slotd-accessor-symbol) 31 1) (system::mfsfun (lisp::quote pcl::structure-slotd-reader-function) 32 1) (system::mfsfun (lisp::quote pcl::structure-slotd-writer-function) 33 1) (system::mfsfun (lisp::quote pcl::renew-sys-files) 34 0) (system::debug (lisp::quote pcl::set-function-name-1) (lisp::quote (#:g2231))) (system::debug (lisp::quote pcl::structure-type-slot-description-list) (lisp::quote (lisp::type lisp::nil pcl::offset pcl::reader-sym pcl::writer-sym pcl::slot-name pcl::read-only-p))) (system::debug (lisp::quote pcl::renew-sys-files) (lisp::quote (pcl::st lisp::nil #:g2254 #:g2246 #:g2260))))))
)
