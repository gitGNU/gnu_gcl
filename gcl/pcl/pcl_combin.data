       
#(#! 
(lisp::in-package :pcl)
#(pcl::call-method :early-method pcl::fast-method-call pcl::method-call pcl::make-method pcl::*boot-state* pcl::complete :arg-info :function :pv-cell :next-method-call :call-method-args pcl::*rebound-effective-method-gensyms* "EFFECTIVE-METHOD-GENSYM-~D" pcl::*global-effective-method-gensyms* "PCL" lisp::lambda (lisp::declare (lisp::ignore pcl::.pv-cell. pcl::.next-method-call.)) (lisp::error "~S outside of an effective method form" (lisp::quote pcl::call-method)) pcl::.fast-call-method. pcl::.call-method. pcl::call-method-list pcl::.fast-call-method-list. pcl::.call-method-list. lisp::dolist pcl::emf pcl::.meth. pcl::.meth-list. pcl::combined-method lisp::progn :before :after :around lisp::error "No primary method for the generic function ~S." lisp::quote lisp::multiple-value-prog1 pcl::*invalid-method-error* pcl::*method-combination-error* pcl::early-method-function pcl::method-fast-function pcl::method-function-pv-table pcl::pv-wrappers-from-all-wrappers pcl::pv-table-lookup pcl::method-function-from-fast-function pcl::method-function pcl::make-effective-method-function1 pcl::make-effective-method-function-simple pcl::make-effective-method-function-internal pcl::method-p pcl::gf-fast-method-function-p pcl::get-method-function pcl::make-effective-method-function-simple1 pcl::method-function-get pcl::make-fast-method-call pcl::make-method-call pcl::make-emf-from-method pcl::make-effective-method-function pcl::get-generic-function-info pcl::make-fast-method-call-lambda-list pcl::make-effective-method-function-type lisp::every pcl::default-test-converter pcl::get-effective-method-gensym pcl::make-emf-call pcl::default-code-converter pcl::default-constant-converter pcl::early-gf-p pcl::early-gf-name pcl::generic-function-name pcl::expand-effective-method-function pcl::get-function1 pcl::early-method-qualifiers pcl::method-qualifiers pcl::make-call-methods pcl::standard-compute-effective-method pcl::set-function-name pcl::memf-constant-converter pcl::memf-code-converter pcl::memf-test-converter (system::%init . #((system::mf (lisp::quote pcl::get-method-function) 0) (system::mf (lisp::quote pcl::make-effective-method-function) 1) (system::mfsfun (lisp::quote pcl::make-effective-method-function1) 2 4) (system::mfsfun (lisp::quote pcl::make-effective-method-function-type) 3 4) (system::mfvfun (lisp::quote pcl::make-effective-method-function-simple) 4 770) (system::mfvfun (lisp::quote pcl::make-emf-from-method) 5 1538) (system::mf (lisp::quote pcl::make-effective-method-function-simple1) 6) (system::*make-special (lisp::quote pcl::*global-effective-method-gensyms*)) (lisp::or (lisp::boundp (lisp::quote pcl::*global-effective-method-gensyms*)) (lisp::setq pcl::*global-effective-method-gensyms* lisp::nil)) (system::*make-special (lisp::quote pcl::*rebound-effective-method-gensyms*)) (system::mfsfun (lisp::quote pcl::get-effective-method-gensym) 7 0) (lisp::let ((pcl::*rebound-effective-method-gensyms* lisp::nil)) (lisp::dotimes (pcl::i 10) (pcl::get-effective-method-gensym))) (system::mfvfun (lisp::quote pcl::expand-effective-method-function) 8 770) (system::mfsfun (lisp::quote pcl::expand-emf-call-method) 9 5) (system::mm (lisp::quote pcl::call-method) 10) (system::mfsfun (lisp::quote pcl::memf-test-converter) 11 4) (system::mf (lisp::quote pcl::memf-code-converter) 12) (system::mfsfun (lisp::quote pcl::memf-constant-converter) 13 2) (system::mfsfun (lisp::quote pcl::make-effective-method-function-internal) 14 4) (system::mm (lisp::quote pcl::call-method-list) 15) (system::mfsfun (lisp::quote pcl::make-call-methods) 16 1) (system::mfsfun (lisp::quote pcl::standard-compute-effective-method) 17 3) (system::mfsfun (lisp::quote pcl::compute-effective-method) 18 3) (system::*make-special (lisp::quote pcl::*invalid-method-error*)) (lisp::or (lisp::boundp (lisp::quote pcl::*invalid-method-error*)) (lisp::setq pcl::*invalid-method-error* (lisp::function (lisp::lambda (lisp::&rest pcl::args) (lisp::declare (lisp::ignore pcl::args)) (lisp::error "INVALID-METHOD-ERROR was called outside the dynamic scope~%~
               of a method combination function (inside the body of~%~
               DEFINE-METHOD-COMBINATION or a method on the generic~%~
               function COMPUTE-EFFECTIVE-METHOD)."))))) (system::*make-special (lisp::quote pcl::*method-combination-error*)) (lisp::or (lisp::boundp (lisp::quote pcl::*method-combination-error*)) (lisp::setq pcl::*method-combination-error* (lisp::function (lisp::lambda (lisp::&rest pcl::args) (lisp::declare (lisp::ignore pcl::args)) (lisp::error "METHOD-COMBINATION-ERROR was called outside the dynamic scope~%~
               of a method combination function (inside the body of~%~
               DEFINE-METHOD-COMBINATION or a method on the generic~%~
               function COMPUTE-EFFECTIVE-METHOD)."))))) (system::mf (lisp::quote pcl::invalid-method-error) 19) (system::mf (lisp::quote pcl::method-combination-error) 20) (system::debug (lisp::quote pcl::get-method-function) (lisp::quote (lisp::method pcl::method-alist pcl::wrappers pcl::pv-table pcl::pv-wrappers pcl::pv-cell))) (system::debug (lisp::quote pcl::make-effective-method-function) (lisp::quote (lisp::generic-function pcl::form pcl::method-alist pcl::wrappers))) (system::debug (lisp::quote pcl::make-effective-method-function-type) (lisp::quote (pcl::cm-args lisp::method pcl::pv-table))) (system::debug (lisp::quote pcl::make-effective-method-function-simple) (lisp::quote (lisp::generic-function pcl::form pcl::no-fmf-p pcl::cm-args1))) (system::debug (lisp::quote pcl::make-emf-from-method) (lisp::quote (lisp::method pcl::cm-args pcl::gf pcl::fmf-p pcl::method-alist pcl::wrappers))) (system::debug (lisp::quote pcl::make-effective-method-function-simple1) (lisp::quote (pcl::gf lisp::method pcl::cm-args pcl::fmf-p pcl::method-alist pcl::wrappers))) (system::debug (lisp::quote pcl::expand-effective-method-function) (lisp::quote (pcl::gf pcl::effective-method))) (system::debug (lisp::quote pcl::memf-test-converter) (lisp::quote (pcl::wrappers-p pcl::method-alist-p lisp::generic-function))) (system::debug (lisp::quote pcl::memf-code-converter) (lisp::quote (pcl::form lisp::generic-function pcl::metatypes pcl::applyp pcl::method-alist-p pcl::wrappers-p))) (system::debug (lisp::quote pcl::make-effective-method-function-internal) (lisp::quote (pcl::wrappers-p pcl::method-alist-p lisp::generic-function pcl::applyp pcl::metatypes lisp::nil pcl::name pcl::arg-info pcl::effective-method-lambda pcl::cfunction pcl::constants))) (system::debug (lisp::quote pcl::standard-compute-effective-method) (lisp::quote (pcl::m))) (system::debug (lisp::quote pcl::invalid-method-error) (lisp::quote (pcl::args))) (system::debug (lisp::quote pcl::method-combination-error) (lisp::quote (pcl::args))))))
)
