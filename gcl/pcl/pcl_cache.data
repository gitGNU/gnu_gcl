       
#(#! 
(lisp::in-package :pcl)
#(lisp::svref lisp::the lisp::simple-vector pcl::non-negative-fixnum lisp::array-dimension :adjustable pcl::cache-vector-ref pcl::without-interrupts lisp::multiple-value-prog1 lisp::progn lisp::let pcl::old-count pcl::cache-vector-lock-count (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::old-count)) lisp::setf (lisp::if (lisp::= pcl::old-count lisp::most-positive-fixnum) 1 (lisp::the pcl::non-negative-fixnum (lisp::1+ pcl::old-count))) #0=(lisp::integer 0 7) #1=#() pcl::cache "#<" "cache ~D ~S ~D" " " ">" pcl::cache-vector pcl::*free-cache-vectors* "Attempt to free a cache-vector not allocated by GET-CACHE-VECTOR." "Freeing a cache twice." :key "~&There  ~4D are caches of size ~4D. (~D free  ~3D%)" 134217727 2147483647 pcl::*get-wrapper-cache-number* lisp::nil :test :start (pcl::wrapper-field (lisp::quote lisp::number)) pcl::next-wrapper-field pcl::wrapper-ref pcl::state pcl::instance-slots-layout pcl::class-slots lisp::class pcl::no-of-instance-slots pcl::wrapper lisp::make-array (:adjustable lisp::nil) lisp::number (pcl::get-wrapper-cache-number) (pcl::state pcl::instance-slots-layout pcl::class-slots lisp::class pcl::no-of-instance-slots) lisp::*print-level* lisp::*print-length* "The value of ~:@(~S~), ~:@(~S~), is ~
                  ~#[nonsense~;not ~:@(~S~)~;neither ~:@(~S~) nor ~:@(~S~)~
                  ~:;not ~@{~#[~;or ~]~:@(~S~)~^, ~}~]." pcl::desc ((lisp::setf (pcl::wrapper-state pcl::wrapper) (lisp::quote lisp::t)) pcl::wrapper) lisp::fixnum pcl::wrapper-cache-number-vector pcl::wrapper-no-of-instance-slots pcl::class-wrapper pcl::wrapper-class pcl::neq pcl::wrapper-state (lisp::quote lisp::t) pcl::*previous-nwrappers* :obsolete "Wrapper returned from trap not wrapper of instance." "Wrapper returned from trap invalid." lisp::cond pcl::std-instance-p pcl::std-instance-wrapper pcl::fsc-instance-p pcl::fsc-instance-wrapper pcl::wrapper-of lisp::if lisp::eq (lisp::quote lisp::t) pcl::check-wrapper-validity pcl::*free-caches* #() pcl::slot-class lisp::standard-class pcl::funcallable-standard-class lisp::structure-class lisp::built-in-class pcl::slot-instance pcl::*boot-state* pcl::complete pcl::*the-class-t* pcl::standard-instance pcl::structure-instance pcl::built-in-instance "PCL can not handle the specializer ~S (meta-specializer ~S)." lisp::let* pcl::args-tail (pcl::invalid-arguments-p lisp::nil) (pcl::dfun-wrappers-tail lisp::nil) ((pcl::wrappers-rev lisp::nil) (pcl::types-rev lisp::nil) (pcl::classes-rev lisp::nil)) lisp::dolist pcl::mt (lisp::unless pcl::args-tail (lisp::setq pcl::invalid-arguments-p lisp::t) (lisp::return lisp::nil)) (pcl::arg (lisp::pop pcl::args-tail)) (pcl::wrapper lisp::nil) ((lisp::class pcl::*the-class-t*) (lisp::type (lisp::quote lisp::t))) lisp::unless (lisp::eq pcl::mt (lisp::quote lisp::t)) (lisp::setq pcl::wrapper (pcl::wrapper-of pcl::arg)) lisp::when (pcl::invalid-wrapper-p pcl::wrapper) lisp::setq (lisp::setq pcl::wrapper (pcl::check-wrapper-validity pcl::arg)) lisp::null lisp::not lisp::consp (lisp::setq pcl::dfun-wrappers-tail (lisp::list pcl::wrapper)) lisp::cons pcl::dfun-wrappers-tail (lisp::t (lisp::let ((pcl::new-dfun-wrappers-tail (lisp::list pcl::wrapper))) (lisp::setf (lisp::cdr pcl::dfun-wrappers-tail) pcl::new-dfun-wrappers-tail) (lisp::setf pcl::dfun-wrappers-tail pcl::new-dfun-wrappers-tail))) ((lisp::setq lisp::class (pcl::wrapper-class* pcl::wrapper)) (lisp::setq lisp::type (lisp::list (lisp::quote pcl::class-eq) lisp::class))) ((lisp::push pcl::wrapper pcl::wrappers-rev) (lisp::push lisp::class pcl::classes-rev) (lisp::push lisp::type pcl::types-rev)) pcl::invalid-arguments-p (lisp::nreverse pcl::wrappers-rev) (lisp::nreverse pcl::classes-rev) lisp::mapcar (lisp::function (lisp::lambda (lisp::class) (lisp::list (lisp::quote pcl::class-eq) lisp::class))) pcl::*dfun-arg-symbols* ".ARG~A." pcl::*the-pcl-package* pcl::*slot-vector-symbols* ".SLOTS~A." lisp::&rest pcl::.dfun-rest-arg. pcl::fast-method-call pcl::invoke-effective-method-function-fast pcl::invoke-effective-method-function (pcl::.dfun-rest-arg.) pcl::function-apply (pcl::.dfun-rest-arg.) pcl::function-funcall lisp::list* (pcl::.dfun-rest-arg.) lisp::list pcl::.pv-cell. pcl::.next-method-call. lisp::function lisp::lambda ((lisp::declare (lisp::ignore pcl::.pv-cell. pcl::.next-method-call.))) pcl::.cache. (lisp::declare (lisp::type pcl::cache pcl::.cache.)) lisp::macrolet (lisp::quote lisp::let) lisp::quote lisp::nil "fill-cache: wrappers arg is NIL!" 1.25F0 pcl::*check-cache-p* pcl::check-cache "Line is reserved." "line is reserved" "bad cache ~S ~@
                      value at location ~D is ~D lines from its home. limit is ~D." "probe-cache: wrappers arg is NIL!" "Line is reserved." "Line is reserved." "Line is reserved." "Attempt to fill a reserved line." "transfering something into a reserved cache line." 1 2 4 8 16 lisp::fill 0 :overflow :vector :max-location :line-size :size :mask :limit-fn :field :nlines :valuep :nkeys :owner pcl::default-limit-fn pcl::printing-random-thing-internal pcl::flush-cache-vector-internal pcl::allocate-cache-vector lisp::< lisp::car lisp::sort lisp::position pcl::wrapper-field pcl::get-wrapper-cache-number :flush pcl::flush-cache-trap pcl::obsolete-instance-trap pcl::make-cache pcl::compute-cache-parameters pcl::get-cache-vector pcl::copy-cache-internal pcl::free-cache-vector pcl::power-of-two-ceiling pcl::find-class pcl::dfun-arg-symbol pcl::make-dfun-lambda-list pcl::make-fast-method-call-lambda-list pcl::fill-cache-p pcl::cache-count pcl::adjust-cache pcl::expand-cache pcl::compute-primary-cache-location-from-location pcl::compute-primary-cache-location pcl::find-free-cache-line pcl::get-cache-from-cache pcl::free-cache lisp::> lisp::cadr pcl::fill-cache-from-cache-p pcl::class-of pcl::specializer-class pcl::*subtypep (system::%init . #((system::mm (lisp::quote pcl::cache-vector-ref) 0) (system::mm (lisp::quote pcl::cache-vector-size) 1) (system::mfsfun (lisp::quote pcl::allocate-cache-vector) 2 1) (system::mm (lisp::quote pcl::cache-vector-lock-count) 3) (system::mfsfun (lisp::quote pcl::flush-cache-vector-internal) 4 1) (system::putprop (lisp::quote pcl::modify-cache) (lisp::quote 1) #2=(lisp::quote system::pretty-print-format)) (system::mm (lisp::quote pcl::modify-cache) 5) (system::putprop (lisp::quote pcl::field-type) (lisp::quote (lisp::deftype pcl::field-type lisp::nil (lisp::quote #0#))) (lisp::quote system::deftype-form)) (system::mf (lisp::quote #3=#:g2581) 6) (system::putprop (lisp::quote pcl::field-type) (lisp::symbol-function (lisp::quote #3#)) (lisp::quote system::deftype-definition)) (system::putprop (lisp::quote pcl::field-type) lisp::nil (lisp::quote system::type-documentation)) (system::mfsfun (lisp::quote pcl::power-of-two-ceiling) 7 4097) (system::*make-constant (lisp::quote pcl::*nkeys-limit*) 256) (system::define-structure (lisp::quote pcl::cache) (lisp::quote pcl::cache-) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote ((pcl::owner lisp::nil lisp::t lisp::nil 0) (pcl::nkeys 1 lisp::unsigned-short lisp::nil 1) (pcl::valuep lisp::nil lisp::t lisp::nil 2) (pcl::nlines 0 lisp::fixnum lisp::nil 3) (pcl::field 0 lisp::unsigned-char lisp::nil 4) (pcl::limit-fn (lisp::function pcl::default-limit-fn) lisp::t lisp::nil 5) (pcl::mask 0 lisp::fixnum lisp::nil 6) (pcl::size 0 lisp::fixnum lisp::nil 7) (pcl::line-size 1 lisp::unsigned-short lisp::nil 8) (pcl::max-location 0 lisp::fixnum lisp::nil 9) (lisp::vector #1# lisp::t lisp::nil 10) (pcl::overflow lisp::nil lisp::t lisp::nil 11))) (lisp::quote pcl::copy-cache-internal) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote pcl::print-cache) (lisp::quote (pcl::|__si::MAKE-CACHE| (pcl::make-cache lisp::nil))) (lisp::quote 12) (lisp::quote pcl::cache-p) (lisp::quote lisp::nil)) (system::mfvfun-key (lisp::quote pcl::|__si::MAKE-CACHE|) 8 16384 9) (system::mfsfun (lisp::quote pcl::make-cache) 10 0) (system::mfsfun (lisp::quote pcl::print-cache) 11 3) (system::freeze-defstruct (lisp::quote pcl::cache)) (system::mm (lisp::quote pcl::cache-lock-count) 12) (system::*make-special (lisp::quote pcl::*free-cache-vectors*)) (lisp::or (lisp::boundp (lisp::quote pcl::*free-cache-vectors*)) (lisp::setq pcl::*free-cache-vectors* (lisp::make-hash-table :size 16 :test (lisp::quote lisp::eql)))) (system::mfsfun (lisp::quote pcl::get-cache-vector) 13 1) (system::mfsfun (lisp::quote pcl::free-cache-vector) 14 1) (system::mfsfun (lisp::quote pcl::show-free-cache-vectors) 15 0) (system::*make-constant (lisp::quote pcl::wrapper-cache-number-adds-ok) 4) (system::*make-constant (lisp::quote pcl::wrapper-cache-number-length) (lisp::- (lisp::integer-length lisp::most-positive-fixnum) pcl::wrapper-cache-number-adds-ok)) (system::*make-constant (lisp::quote pcl::wrapper-cache-number-mask) (lisp::1- (lisp::expt 2 pcl::wrapper-cache-number-length))) (system::*make-special (lisp::quote pcl::*get-wrapper-cache-number*)) (lisp::or (lisp::boundp (lisp::quote pcl::*get-wrapper-cache-number*)) (lisp::setq pcl::*get-wrapper-cache-number* (lisp::make-random-state))) (system::mfsfun (lisp::quote pcl::get-wrapper-cache-number) 16 256) (lisp::if (lisp::not (lisp::> pcl::wrapper-cache-number-length 8)) (lisp::progn (lisp::error "In this implementation of Common Lisp, fixnums are so small that~@
          wrapper cache numbers end up being only ~D bits long.  This does~@
          not actually keep PCL from running, but it may degrade cache~@
          performance.~@
          You may want to consider changing the value of the constant~@
          WRAPPER-CACHE-NUMBER-ADDS-OK."))) (system::*make-constant (lisp::quote pcl::wrapper-layout) (lisp::quote (lisp::number lisp::number lisp::number lisp::number lisp::number lisp::number lisp::number lisp::number pcl::state pcl::instance-slots-layout pcl::class-slots lisp::class pcl::no-of-instance-slots))) (system::setvv 32 pcl::wrapper-layout) (system::mfsfun (lisp::quote pcl::wrapper-field) 17 1) (system::mfsfun (lisp::quote pcl::next-wrapper-field) 18 1) (system::mm (lisp::quote pcl::first-wrapper-cache-number-index) 19) (system::mm (lisp::quote pcl::next-wrapper-cache-number-index) 20) (system::mm (lisp::quote pcl::wrapper-cache-number-vector) 21) (system::mm (lisp::quote pcl::cache-number-vector-ref) 22) (system::mm (lisp::quote pcl::wrapper-ref) 23) (system::mm (lisp::quote pcl::wrapper-state) 24) (system::mm (lisp::quote pcl::wrapper-instance-slots-layout) 25) (system::mm (lisp::quote pcl::wrapper-class-slots) 26) (system::mm (lisp::quote pcl::wrapper-class) 27) (system::mm (lisp::quote pcl::wrapper-no-of-instance-slots) 28) (system::mm (lisp::quote pcl::make-wrapper-internal) 29) (system::mfvfun (lisp::quote pcl::make-wrapper) 30 513) (system::mm (lisp::quote pcl::wrapper-cache-number-vector-ref) 31) (system::mm (lisp::quote pcl::class-no-of-instance-slots) 32) (system::mm (lisp::quote pcl::wrapper-class*) 33) (system::mm (lisp::quote pcl::invalid-wrapper-p) 34) (system::*make-special (lisp::quote pcl::*previous-nwrappers*)) (lisp::or (lisp::boundp (lisp::quote pcl::*previous-nwrappers*)) (lisp::setq pcl::*previous-nwrappers* (lisp::make-hash-table))) (system::mfsfun (lisp::quote pcl::invalidate-wrapper) 35 3) (system::mfsfun (lisp::quote pcl::check-wrapper-validity) 36 1) (system::mm (lisp::quote pcl::check-wrapper-validity1) 37) (system::*make-special (lisp::quote pcl::*free-caches*)) (lisp::or (lisp::boundp (lisp::quote pcl::*free-caches*)) (lisp::setq pcl::*free-caches* lisp::nil)) (system::mfsfun (lisp::quote pcl::get-cache) 38 262148) (system::mfvfun (lisp::quote pcl::get-cache-from-cache) 39 770) (system::mfsfun (lisp::quote pcl::copy-cache) 40 1) (system::mfsfun (lisp::quote pcl::free-cache) 41 1) (system::mfsfun (lisp::quote pcl::compute-line-size) 42 1) (system::mf (lisp::quote pcl::compute-cache-parameters) 43) (system::mfsfun (lisp::quote pcl::compute-primary-cache-location) 44 20739) (system::mfvfun (lisp::quote pcl::compute-primary-cache-location-from-location) 45 770) (system::mfsfun (lisp::quote pcl::raise-metatype) 46 2) (system::putprop (lisp::quote pcl::with-dfun-wrappers) (lisp::quote 3) #2#) (system::mm (lisp::quote pcl::with-dfun-wrappers) 47) (system::*make-special (lisp::quote pcl::*dfun-arg-symbols*)) (lisp::or (lisp::boundp (lisp::quote pcl::*dfun-arg-symbols*)) (lisp::setq pcl::*dfun-arg-symbols* (lisp::quote (pcl::.arg0. pcl::.arg1. pcl::.arg2. pcl::.arg3.)))) (system::mfsfun (lisp::quote pcl::dfun-arg-symbol) 48 1) (system::*make-special (lisp::quote pcl::*slot-vector-symbols*)) (lisp::or (lisp::boundp (lisp::quote pcl::*slot-vector-symbols*)) (lisp::setq pcl::*slot-vector-symbols* (lisp::quote (pcl::.slots0. pcl::.slots1. pcl::.slots2. pcl::.slots3.)))) (system::mfsfun (lisp::quote pcl::slot-vector-symbol) 49 1) (system::mfsfun (lisp::quote pcl::make-dfun-lambda-list) 50 2) (system::mfsfun (lisp::quote pcl::make-dlap-lambda-list) 51 2) (system::mfvfun (lisp::quote pcl::make-emf-call) 52 1027) (system::mfsfun (lisp::quote pcl::make-dfun-call) 53 3) (system::mfsfun (lisp::quote pcl::make-dfun-arg-list) 54 2) (system::mfsfun (lisp::quote pcl::make-fast-method-call-lambda-list) 55 2) (system::putprop (lisp::quote pcl::fin-lambda-fn) (lisp::quote 1) #2#) (system::mm (lisp::quote pcl::fin-lambda-fn) 56) (system::mfsfun (lisp::quote pcl::make-dispatch-lambda) 57 4) (system::*make-special (lisp::quote pcl::*cache*)) (lisp::or (lisp::boundp (lisp::quote pcl::*cache*)) (lisp::setq pcl::*cache* lisp::nil)) (system::*make-constant (lisp::quote pcl::*local-cache-functions*) (lisp::quote ((pcl::cache lisp::nil pcl::.cache.) (pcl::nkeys lisp::nil (pcl::cache-nkeys pcl::.cache.)) (pcl::line-size lisp::nil (pcl::cache-line-size pcl::.cache.)) (lisp::vector lisp::nil (pcl::cache-vector pcl::.cache.)) (pcl::valuep lisp::nil (pcl::cache-valuep pcl::.cache.)) (pcl::nlines lisp::nil (pcl::cache-nlines pcl::.cache.)) (pcl::max-location lisp::nil (pcl::cache-max-location pcl::.cache.)) (pcl::limit-fn lisp::nil (pcl::cache-limit-fn pcl::.cache.)) (pcl::size lisp::nil (pcl::cache-size pcl::.cache.)) (pcl::mask lisp::nil (pcl::cache-mask pcl::.cache.)) (pcl::field lisp::nil (pcl::cache-field pcl::.cache.)) (pcl::overflow lisp::nil (pcl::cache-overflow pcl::.cache.)) (pcl::line-reserved-p (pcl::line) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line)) (lisp::and (lisp::= (pcl::nkeys) 1) (lisp::= pcl::line 0))) (pcl::location-reserved-p (pcl::location) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::location)) (lisp::and (lisp::= (pcl::nkeys) 1) (lisp::= pcl::location 0))) (pcl::line-location (pcl::line) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line)) (lisp::when (pcl::line-reserved-p pcl::line) (lisp::error "line is reserved")) (lisp::if (lisp::= (pcl::nkeys) 1) (lisp::the pcl::non-negative-fixnum (lisp::* pcl::line (pcl::line-size))) (lisp::the pcl::non-negative-fixnum (lisp::1+ (lisp::the pcl::non-negative-fixnum (lisp::* pcl::line (pcl::line-size))))))) (pcl::location-line (pcl::location) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::location)) (lisp::if (lisp::= (pcl::nkeys) 1) (lisp::floor pcl::location (pcl::line-size)) (lisp::floor (lisp::the pcl::non-negative-fixnum (lisp::1- pcl::location)) (pcl::line-size)))) (pcl::line-wrappers (pcl::line) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line)) (lisp::when (pcl::line-reserved-p pcl::line) (lisp::error "Line is reserved.")) (pcl::location-wrappers (pcl::line-location pcl::line))) (pcl::location-wrappers (pcl::location) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::location)) (lisp::if (lisp::= (pcl::nkeys) 1) (pcl::cache-vector-ref (lisp::vector) pcl::location) (lisp::let ((lisp::list (lisp::make-list (pcl::nkeys))) (lisp::vector (lisp::vector))) (lisp::declare (lisp::simple-vector lisp::vector)) (lisp::dotimes (pcl::i (pcl::nkeys) lisp::list) (lisp::setf (lisp::nth pcl::i lisp::list) (pcl::cache-vector-ref lisp::vector (lisp::+ pcl::location pcl::i))))))) (pcl::line-matches-wrappers-p (pcl::line pcl::wrappers) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line)) (lisp::and (lisp::not (pcl::line-reserved-p pcl::line)) (pcl::location-matches-wrappers-p (pcl::line-location pcl::line) pcl::wrappers))) (pcl::location-matches-wrappers-p (pcl::loc pcl::wrappers) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::loc)) (lisp::let ((pcl::cache-vector (lisp::vector))) (lisp::declare (lisp::simple-vector pcl::cache-vector)) (lisp::if (lisp::= (pcl::nkeys) 1) (lisp::eq pcl::wrappers (pcl::cache-vector-ref pcl::cache-vector pcl::loc)) (lisp::dotimes (pcl::i (pcl::nkeys) lisp::t) (lisp::unless (lisp::eq (lisp::pop pcl::wrappers) (pcl::cache-vector-ref pcl::cache-vector (lisp::+ pcl::loc pcl::i))) (lisp::return lisp::nil)))))) (pcl::line-value (pcl::line) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line)) (lisp::when (pcl::line-reserved-p pcl::line) (lisp::error "Line is reserved.")) (pcl::location-value (pcl::line-location pcl::line))) (pcl::location-value (pcl::loc) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::loc)) (lisp::and (pcl::valuep) (pcl::cache-vector-ref (lisp::vector) (lisp::+ pcl::loc (pcl::nkeys))))) (pcl::line-full-p (pcl::line) (lisp::when (pcl::line-reserved-p pcl::line) (lisp::error "Line is reserved.")) (lisp::not (lisp::null (pcl::cache-vector-ref (lisp::vector) (pcl::line-location pcl::line))))) (pcl::line-valid-p (pcl::line pcl::wrappers) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line)) (lisp::when (pcl::line-reserved-p pcl::line) (lisp::error "Line is reserved.")) (pcl::location-valid-p (pcl::line-location pcl::line) pcl::wrappers)) (pcl::location-valid-p (pcl::loc pcl::wrappers) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::loc)) (lisp::let ((pcl::cache-vector (lisp::vector)) (pcl::wrappers-mismatch-p (lisp::null pcl::wrappers))) (lisp::declare (lisp::simple-vector pcl::cache-vector)) (lisp::dotimes (pcl::i (pcl::nkeys) pcl::wrappers-mismatch-p) (lisp::let ((pcl::wrapper (pcl::cache-vector-ref pcl::cache-vector (lisp::+ pcl::loc pcl::i)))) (lisp::when (lisp::or (lisp::null pcl::wrapper) (pcl::invalid-wrapper-p pcl::wrapper)) (lisp::return lisp::nil)) (lisp::unless (lisp::and pcl::wrappers (lisp::eq pcl::wrapper (lisp::if (lisp::consp pcl::wrappers) (lisp::pop pcl::wrappers) pcl::wrappers))) (lisp::setq pcl::wrappers-mismatch-p lisp::t)))))) (pcl::line-separation (pcl::line-1 pcl::line-2) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line-1 pcl::line-2)) (lisp::let ((pcl::diff (lisp::the lisp::fixnum (lisp::- pcl::line-2 pcl::line-1)))) (lisp::declare (lisp::fixnum pcl::diff)) (lisp::when (lisp::minusp pcl::diff) (lisp::setq pcl::diff (lisp::+ pcl::diff (pcl::nlines))) (lisp::when (pcl::line-reserved-p 0) (lisp::setq pcl::diff (lisp::1- pcl::diff)))) pcl::diff)) (pcl::next-line (pcl::line) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line)) (lisp::if (lisp::= pcl::line (lisp::the lisp::fixnum (lisp::1- (pcl::nlines)))) (lisp::if (pcl::line-reserved-p 0) 1 0) (lisp::the pcl::non-negative-fixnum (lisp::1+ pcl::line)))) (pcl::next-location (pcl::loc) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::loc)) (lisp::if (lisp::= pcl::loc (pcl::max-location)) (lisp::if (lisp::= (pcl::nkeys) 1) (pcl::line-size) 1) (lisp::the pcl::non-negative-fixnum (lisp::+ pcl::loc (pcl::line-size))))) (pcl::line-primary (pcl::line) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line)) (pcl::location-line (pcl::line-primary-location pcl::line))) (pcl::line-primary-location (pcl::line) (lisp::declare (lisp::type pcl::non-negative-fixnum pcl::line)) (pcl::compute-primary-cache-location-from-location (pcl::cache) (pcl::line-location pcl::line)))))) (system::setvv 150 pcl::*local-cache-functions*) (system::putprop (lisp::quote pcl::with-local-cache-functions) (lisp::quote 1) #2#) (system::mm (lisp::quote pcl::with-local-cache-functions) 58) (system::*make-special (lisp::quote pcl::*cache-expand-threshold*)) (lisp::or (lisp::boundp (lisp::quote pcl::*cache-expand-threshold*)) (lisp::setq pcl::*cache-expand-threshold* 1.25F0)) (system::mfvfun (lisp::quote pcl::fill-cache) 59 1027) (system::*make-special (lisp::quote pcl::*check-cache-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*check-cache-p*)) (lisp::setq pcl::*check-cache-p* lisp::nil)) (system::mm (lisp::quote pcl::maybe-check-cache) 60) (system::mfsfun (lisp::quote pcl::check-cache) 61 1) (system::mfvfun (lisp::quote pcl::probe-cache) 62 1026) (system::mfvfun (lisp::quote pcl::map-cache) 63 770) (system::mfsfun (lisp::quote pcl::cache-count) 64 257) (system::mfsfun (lisp::quote pcl::entry-in-cache-p) 65 3) (system::mfsfun (lisp::quote pcl::fill-cache-p) 66 4) (system::mfsfun (lisp::quote pcl::fill-cache-from-cache-p) 67 262148) (system::mfsfun (lisp::quote pcl::adjust-cache) 68 4) (system::mfsfun (lisp::quote pcl::expand-cache) 69 4) (system::mf (lisp::quote pcl::find-free-cache-line) 70) (system::mfsfun (lisp::quote pcl::default-limit-fn) 71 257) (system::*make-special (lisp::quote pcl::*empty-cache*)) (lisp::or (lisp::boundp (lisp::quote pcl::*empty-cache*)) (lisp::setq pcl::*empty-cache* (pcl::make-cache))) (lisp::block lisp::nil (lisp::let* ((#4=#:g3738 (lisp::quote ((1 513) (3 257) (3 129) (14 128) (6 65) (2 64) (7 33) (16 32) (16 17) (32 16) (64 9) (64 8) (6 5) (128 4) (35 2)))) (pcl::n-size (lisp::car #4#))) (lisp::tagbody #5=#:g3739 (lisp::if (lisp::endp #4#) (lisp::return (lisp::progn lisp::nil))) (lisp::tagbody (lisp::let ((pcl::n (lisp::car pcl::n-size)) (pcl::size (lisp::cadr pcl::n-size))) (lisp::mapcar (lisp::function pcl::free-cache-vector) (lisp::mapcar (lisp::function pcl::get-cache-vector) (lisp::make-list pcl::n :initial-element pcl::size))))) (lisp::setq #4# (lisp::cdr #4#) pcl::n-size (lisp::car #4#)) (lisp::go #5#)))) (system::mfsfun (lisp::quote pcl::caches-to-allocate) 72 0) (system::debug (lisp::quote pcl::|__si::MAKE-CACHE|) (lisp::quote (pcl::owner pcl::nkeys pcl::valuep pcl::nlines pcl::field pcl::limit-fn pcl::mask pcl::size pcl::line-size pcl::max-location lisp::vector pcl::overflow))) (system::debug (lisp::quote pcl::make-cache) (lisp::quote (pcl::limit-fn))) (system::debug (lisp::quote pcl::get-cache-vector) (lisp::quote (#:g2590))) (system::debug (lisp::quote pcl::show-free-cache-vectors) (lisp::quote (iterate::elements pcl::e pcl::size pcl::entry pcl::allocated pcl::head))) (system::debug (lisp::quote pcl::make-wrapper) (lisp::quote (pcl::no-of-instance-slots lisp::class))) (system::debug (lisp::quote pcl::invalidate-wrapper) (lisp::quote (#:g2670 pcl::previous))) (system::debug (lisp::quote pcl::check-wrapper-validity) (lisp::quote (pcl::owrapper pcl::state))) (system::debug (lisp::quote pcl::get-cache-from-cache) (lisp::quote (pcl::old-cache pcl::new-nlines pcl::new-field))) (system::debug (lisp::quote pcl::copy-cache) (lisp::quote (pcl::new-cache pcl::size pcl::old-vector pcl::new-vector))) (system::debug (lisp::quote pcl::compute-cache-parameters) (lisp::quote (pcl::nkeys pcl::valuep pcl::nlines-or-cache-vector))) (system::debug (lisp::quote pcl::compute-primary-cache-location) (lisp::quote (pcl::wrapper))) (system::debug (lisp::quote pcl::compute-primary-cache-location-from-location) (lisp::quote (pcl::to-cache pcl::from-location pcl::from-cache))) (system::debug (lisp::quote pcl::raise-metatype) (lisp::quote (pcl::new-specializer pcl::slot pcl::standard pcl::fsc lisp::structure pcl::built-in))) (system::debug (lisp::quote pcl::make-emf-call) (lisp::quote (pcl::metatypes pcl::applyp pcl::fn-variable pcl::emf-type))) (system::debug (lisp::quote pcl::fill-cache) (lisp::quote (pcl::cache pcl::wrappers pcl::value pcl::free-cache-p))) (system::debug (lisp::quote pcl::check-cache) (lisp::quote (pcl::home-loc pcl::home pcl::sep))) (system::debug (lisp::quote pcl::probe-cache) (lisp::quote (pcl::cache pcl::wrappers pcl::default pcl::limit-fn))) (system::debug (lisp::quote pcl::map-cache) (lisp::quote (lisp::function pcl::cache pcl::set-p))) (system::debug (lisp::quote pcl::entry-in-cache-p) (lisp::quote (#:g3183))) (system::debug (lisp::quote pcl::fill-cache-p) (lisp::quote (#:g3245 #:g3247 #:g3260))) (system::debug (lisp::quote pcl::fill-cache-from-cache-p) (lisp::quote (#:g3326 #:g3328 #:g3341))) (system::debug (lisp::quote pcl::adjust-cache) (lisp::quote (pcl::cache pcl::ncache #:g3489 pcl::wrappers+value))) (system::debug (lisp::quote pcl::expand-cache) (lisp::quote (pcl::cache pcl::.cache. pcl::ncache #:g3645 pcl::wrappers+value))) (system::debug (lisp::quote pcl::find-free-cache-line) (lisp::quote (pcl::primary pcl::cache pcl::wrappers))) (system::debug (lisp::quote pcl::caches-to-allocate) (lisp::quote (lisp::nil pcl::l))))))
)
